function dataset = cwEPRdatasetCreate(varargin)
% CWEPRDATASETCREATE Create and return data structure of cwEPR dataset.
%
% Usage
%   dataset = cwEPRdatasetCreate
%   dataset = cwEPRdatasetCreate(<parameters>)
%
%   dataset    - struct
%                Structure complying with the data structure of the dataset
%                of the common toolbox
%
%   parameters - key-value pairs (OPTIONAL)
%
%                Optional parameters may include:
%
%                numberOfAxes      - scalar
%                                    Number of axes the dataset should have
%                                    Default: 2
%
%                hasOptionalFields - logical
%                                    Should  the dataset have optional
%                                    fields?
%                                    Default: false
%    
% Hint: Parameters can be provided as a structure with the fieldnames
% corresponding to the parameter names specified above.
%
% SEE ALSO: commonDatasetCreate, commonHistoryCreate, cwEPRhistoryCreate

% Copyright (c) 2015, Till Biskup
% 2015-03-05

% Assign output parameter
dataset = struct(); %#ok<NASGU>

% Parse input arguments using the inputParser functionality
p = inputParser;            % Create an instance of the inputParser class.
p.FunctionName = mfilename; % Function name to be included in error messages
p.KeepUnmatched = true;     % Enable errors on unmatched arguments
p.StructExpand = true;      % Enable passing arguments in a structure
% Add optional parameters, with default values
p.addParamValue('numberOfAxes',2,@isscalar);
p.addParamValue('hasOptionalFields',false,@islogical);
% Parse input arguments
p.parse(varargin{:});

% Define version of dataset structure
structureVersion = '0.1';

% Call function from common toolbox
dataset = commonDatasetCreate(...
    'numberOfAxes',p.Results.numberOfAxes,...
    'hasOptionalFields',p.Results.hasOptionalFields...
    );

dataset.parameters = struct(...
    'experiment',struct(...
        'type','',...
        'runs',[],...
        'variableParameter','',...
        'increment',struct(...
            'value',[],...
            'unit','' ...
            ) ...
        ), ...
    'spectrometer',struct(...
        'model','',...
        'software','' ...
        ), ...
    'field',struct(...
        'probe',struct(...
            'type','',...
            'model','' ...
            ),...
        'start',[], ...
        'stop',[], ...
        'step',[], ...
        'unit','', ...
        'sequence','',...
        'controller','',...
        'powerSupply','',...
        'calibration',struct(...
            'filename','',...
            'probe',struct(...
                'type','',...
                'model','' ...
                ),...
            'standard','',...
            'signalField',struct(...
                'value',[],...
                'unit','' ...
                ),...
            'MWfrequency',struct(...
                'value',[],...
                'unit','' ...
                )...
            ),...
        'bridge',struct(...
            'MWfrequency',struct(...
                'value',[],...
                'unit','' ...
                ),...
            'attenuation',struct(...
                'value',[],...
                'unit','' ...
                ),...
            'power',struct(...
                'value',[],...
                'unit','' ...
                ),...
            'Qvalue',[],...
            'model','',...
            'controller','',...
            'MWfrequencyCounter','',...
            'detection','' ...
            ), ...
        'signalChannel',struct(...
            'model','',...
            'accumulations',[],...
            'modulation',struct(...
                'amplifier','',...
                'frequency',struct(...
                    'value',[],...
                    'unit','' ...
                    ),...
                'amplitude',struct(...
                    'value',[],...
                    'unit','' ...
                    ),...
                'phase',struct(...
                    'value',[],...
                    'unit','' ...
                    ),...
                'conversionTime',struct(...
                    'value',[],...
                    'unit','' ...
                    ),...
                'timeConstant',struct(...
                    'value',[],...
                    'unit','' ...
                    )...
                ),...
            'receiverGain',[] ...
            ), ...
        'probehead',struct(...
            'type','',...
            'model','',...
            'coupling','' ...
            ), ...
        'background',struct(...
            'filename','',...
            'type','' ...
            ) ...
        ) ...
    );

dataset.parameters.temperature.controller = '';
dataset.parameters.temperature.cryostat = '';
dataset.parameters.temperature.cryogen = '';

% NOTE: Matlab doesn't handle cells defined in structs together with other
%       parameters. Therefore, you have to add them explicitly afterwards.

dataset.format = struct(...
    'type','cwEPR dataset',...
    'version',structureVersion ...
    );

end
